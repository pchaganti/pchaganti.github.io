{
  "last_updated": "2025-10-02T20:53:04.098739-04:00",
  "papers": [
    {
      "title": "OmniRetarget: Interaction-Preserving Data Generation for Humanoid\n  Whole-Body Loco-Manipulation and Scene Interaction",
      "summary": "A dominant paradigm for teaching humanoid robots complex skills is to\nretarget human motions as kinematic references to train reinforcement learning\n(RL) policies. However, existing retargeting pipelines often struggle with the\nsignificant embodiment gap between humans and robots, producing physically\nimplausible artifacts like foot-skating and penetration. More importantly,\ncommon retargeting methods neglect the rich human-object and human-environment\ninteractions essential for expressive locomotion and loco-manipulation. To\naddress this, we introduce OmniRetarget, an interaction-preserving data\ngeneration engine based on an interaction mesh that explicitly models and\npreserves the crucial spatial and contact relationships between an agent, the\nterrain, and manipulated objects. By minimizing the Laplacian deformation\nbetween the human and robot meshes while enforcing kinematic constraints,\nOmniRetarget generates kinematically feasible trajectories. Moreover,\npreserving task-relevant interactions enables efficient data augmentation, from\na single demonstration to different robot embodiments, terrains, and object\nconfigurations. We comprehensively evaluate OmniRetarget by retargeting motions\nfrom OMOMO, LAFAN1, and our in-house MoCap datasets, generating over 8-hour\ntrajectories that achieve better kinematic constraint satisfaction and contact\npreservation than widely used baselines. Such high-quality data enables\nproprioceptive RL policies to successfully execute long-horizon (up to 30\nseconds) parkour and loco-manipulation skills on a Unitree G1 humanoid, trained\nwith only 5 reward terms and simple domain randomization shared by all tasks,\nwithout any learning curriculum.",
      "url": "http://arxiv.org/abs/2509.26633v1",
      "published_time_eastern_timestamp": 1759255142.0
    },
    {
      "title": "Branching Out: Broadening AI Measurement and Evaluation with Measurement\n  Trees",
      "summary": "This paper introduces \\textit{measurement trees}, a novel class of metrics\ndesigned to combine various constructs into an interpretable multi-level\nrepresentation of a measurand. Unlike conventional metrics that yield single\nvalues, vectors, surfaces, or categories, measurement trees produce a\nhierarchical directed graph in which each node summarizes its children through\nuser-defined aggregation methods. In response to recent calls to expand the\nscope of AI system evaluation, measurement trees enhance metric transparency\nand facilitate the integration of heterogeneous evidence, including, e.g.,\nagentic, business, energy-efficiency, sociotechnical, or security signals. We\npresent definitions and examples, demonstrate practical utility through a\nlarge-scale measurement exercise, and provide accompanying open-source Python\ncode. By operationalizing a transparent approach to measurement of complex\nconstructs, this work offers a principled foundation for broader and more\ninterpretable AI evaluation.",
      "url": "http://arxiv.org/abs/2509.26632v1",
      "published_time_eastern_timestamp": 1759255139.0
    },
    {
      "title": "Fine-tuning Behavioral Cloning Policies with Preference-Based\n  Reinforcement Learning",
      "summary": "Deploying reinforcement learning (RL) in robotics, industry, and health care\nis blocked by two obstacles: the difficulty of specifying accurate rewards and\nthe risk of unsafe, data-hungry exploration. We address this by proposing a\ntwo-stage framework that first learns a safe initial policy from a reward-free\ndataset of expert demonstrations, then fine-tunes it online using\npreference-based human feedback. We provide the first principled analysis of\nthis offline-to-online approach and introduce BRIDGE, a unified algorithm that\nintegrates both signals via an uncertainty-weighted objective. We derive regret\nbounds that shrink with the number of offline demonstrations, explicitly\nconnecting the quantity of offline data to online sample efficiency. We\nvalidate BRIDGE in discrete and continuous control MuJoCo environments, showing\nit achieves lower regret than both standalone behavioral cloning and online\npreference-based RL. Our work establishes a theoretical foundation for\ndesigning more sample-efficient interactive agents.",
      "url": "http://arxiv.org/abs/2509.26605v1",
      "published_time_eastern_timestamp": 1759254619.0
    },
    {
      "title": "Towards Reliable Benchmarking: A Contamination Free, Controllable\n  Evaluation Framework for Multi-step LLM Function Calling",
      "summary": "As language models gain access to external tools via structured function\ncalls, they become increasingly more capable of solving complex, multi-step\ntasks. However, existing benchmarks for tool-augmented language models (TaLMs)\nprovide insufficient control over factors such as the number of functions\naccessible, task complexity, and input size, and remain vulnerable to data\ncontamination. We present FuncBenchGen, a unified, contamination-free framework\nthat evaluates TaLMs by generating synthetic multi-step tool-use tasks. The key\nidea is to cast tool use as traversal over a hidden function-dependency DAG\nwhere nodes are function calls and an edge between nodes represents one\nfunction consuming the output of another. Given a set of external function\nschemas, initial variable values, and a target variable, models must compose\nthe correct call sequence to compute the target variable. FuncBenchGen allows\nusers to precisely control task difficulty (e.g., graph size, dependency depth,\nand distractor functions) while avoiding data leakage. We apply our\nFuncBenchGen framework to evaluate seven LLMs on tool use tasks of varying\ndifficulty. Reasoning-optimized models consistently outperform general-purpose\nmodels with GPT-5 significantly outperforming other models. Performance\ndeclines sharply as dependency depth increases. Furthermore, connected\nirrelevant functions prove especially difficult to handle. We find that strong\nmodels often make syntactically valid function calls but propagate incorrect or\nstale argument values across steps, revealing brittle state tracking by LLMs in\nmulti-turn tool use. Motivated by this observation, we introduce a simple\nmitigation strategy that explicitly restates prior variable values to the agent\nat each step. Surprisingly, this lightweight change yields substantial gains\nacross models. e.g., yielding a success rate improvement from 62.5% to 81.3%\nfor GPT-5.",
      "url": "http://arxiv.org/abs/2509.26553v1",
      "published_time_eastern_timestamp": 1759252877.0
    },
    {
      "title": "Towards Verified Code Reasoning by LLMs",
      "summary": "While LLM-based agents are able to tackle a wide variety of code reasoning\nquestions, the answers are not always correct. This prevents the agent from\nbeing useful in situations where high precision is desired: (1) helping a\nsoftware engineer understand a new code base, (2) helping a software engineer\nduring code review sessions, and (3) ensuring that the code generated by an\nautomated code generation system meets certain requirements (e.g. fixes a bug,\nimproves readability, implements a feature).\n  As a result of this lack of trustworthiness, the agent's answers need to be\nmanually verified before they can be trusted. Manually confirming responses\nfrom a code reasoning agent requires human effort and can result in slower\ndeveloper productivity, which weakens the assistance benefits of the agent. In\nthis paper, we describe a method to automatically validate the answers provided\nby a code reasoning agent by verifying its reasoning steps. At a very high\nlevel, the method consists of extracting a formal representation of the agent's\nresponse and, subsequently, using formal verification and program analysis\ntools to verify the agent's reasoning steps.\n  We applied this approach to a benchmark set of 20 uninitialized variable\nerrors detected by sanitizers and 20 program equivalence queries. For the\nuninitialized variable errors, the formal verification step was able to\nvalidate the agent's reasoning on 13/20 examples, and for the program\nequivalence queries, the formal verification step successfully caught 6/8\nincorrect judgments made by the agent.",
      "url": "http://arxiv.org/abs/2509.26546v1",
      "published_time_eastern_timestamp": 1759252671.0
    },
    {
      "title": "Ferret-UI Lite: Lessons from Building Small On-Device GUI Agents",
      "summary": "Developing autonomous agents that effectively interact with Graphic User\nInterfaces (GUIs) remains a challenging open problem, especially for small\non-device models. In this paper, we present Ferret-UI Lite, a compact,\nend-to-end GUI agent that operates across diverse platforms, including mobile,\nweb, and desktop. Utilizing techniques optimized for developing small models,\nwe build our 3B Ferret-UI Lite agent through curating a diverse GUI data\nmixture from real and synthetic sources, strengthening inference-time\nperformance through chain-of-thought reasoning and visual tool-use, and\nreinforcement learning with designed rewards. Ferret-UI Lite achieves\ncompetitive performance with other small-scale GUI agents. In GUI grounding,\nFerret-UI Lite attains scores of $91.6\\%$, $53.3\\%$, and $61.2\\%$ on the\nScreenSpot-V2, ScreenSpot-Pro, and OSWorld-G benchmarks, respectively. For GUI\nnavigation, Ferret-UI Lite achieves success rates of $28.0\\%$ on AndroidWorld\nand $19.8\\%$ on OSWorld. We share our methods and lessons learned from\ndeveloping compact, on-device GUI agents.",
      "url": "http://arxiv.org/abs/2509.26539v1",
      "published_time_eastern_timestamp": 1759252436.0
    },
    {
      "title": "OceanGym: A Benchmark Environment for Underwater Embodied Agents",
      "summary": "We introduce OceanGym, the first comprehensive benchmark for ocean underwater\nembodied agents, designed to advance AI in one of the most demanding real-world\nenvironments. Unlike terrestrial or aerial domains, underwater settings present\nextreme perceptual and decision-making challenges, including low visibility,\ndynamic ocean currents, making effective agent deployment exceptionally\ndifficult. OceanGym encompasses eight realistic task domains and a unified\nagent framework driven by Multi-modal Large Language Models (MLLMs), which\nintegrates perception, memory, and sequential decision-making. Agents are\nrequired to comprehend optical and sonar data, autonomously explore complex\nenvironments, and accomplish long-horizon objectives under these harsh\nconditions. Extensive experiments reveal substantial gaps between\nstate-of-the-art MLLM-driven agents and human experts, highlighting the\npersistent difficulty of perception, planning, and adaptability in ocean\nunderwater environments. By providing a high-fidelity, rigorously designed\nplatform, OceanGym establishes a testbed for developing robust embodied AI and\ntransferring these capabilities to real-world autonomous ocean underwater\nvehicles, marking a decisive step toward intelligent agents capable of\noperating in one of Earth's last unexplored frontiers. The code and data are\navailable at https://github.com/OceanGPT/OceanGym.",
      "url": "http://arxiv.org/abs/2509.26536v1",
      "published_time_eastern_timestamp": 1759252172.0
    },
    {
      "title": "Optimal Matching Strategies in Two-sided Markets: A Mean Field Approach",
      "summary": "This paper develops a mean field game framework for dynamic two-sided\nmatching markets, extending existing matching theory by integrating micro-macro\ndynamics in two-sided environments. Unlike traditional matching models focusing\non static equilibrium or unilateral optimization, our framework simultaneously\ncaptures dynamic interactions and strategic behaviors of both market sides, as\nwell as the equilibrium. We model two types of agents who meet each other via\nPoisson processes and make simultaneous matching decisions to maximize their\nrespective objective functionals, and find the corresponding equilibrium. Our\napproach formulates the equilibrium as a fully coupled Hamilton-Jacobi-Bellman\nand Fokker-Planck system with nonlocal structure coupling two distinct\npopulations. The mathematical analysis addresses significant challenges from\nthe dual-layered coupling structure and nonlocal structure. We also provide\ninsights into individual behaviors shaping aggregate patterns in labor markets\nthrough numerical experiments.",
      "url": "http://arxiv.org/abs/2509.26531v1",
      "published_time_eastern_timestamp": 1759251940.0
    },
    {
      "title": "SCUBA: Salesforce Computer Use Benchmark",
      "summary": "We introduce SCUBA, a benchmark designed to evaluate computer-use agents on\ncustomer relationship management (CRM) workflows within the Salesforce\nplatform. SCUBA contains 300 task instances derived from real user interviews,\nspanning three primary personas, platform administrators, sales\nrepresentatives, and service agents. The tasks test a range of\nenterprise-critical abilities, including Enterprise Software UI navigation,\ndata manipulation, workflow automation, information retrieval, and\ntroubleshooting. To ensure realism, SCUBA operates in Salesforce sandbox\nenvironments with support for parallel execution and fine-grained evaluation\nmetrics to capture milestone progress. We benchmark a diverse set of agents\nunder both zero-shot and demonstration-augmented settings. We observed huge\nperformance gaps in different agent design paradigms and gaps between the\nopen-source model and the closed-source model. In the zero-shot setting,\nopen-source model powered computer-use agents that have strong performance on\nrelated benchmarks like OSWorld only have less than 5\\% success rate on SCUBA,\nwhile methods built on closed-source models can still have up to 39% task\nsuccess rate. In the demonstration-augmented settings, task success rates can\nbe improved to 50\\% while simultaneously reducing time and costs by 13% and\n16%, respectively. These findings highlight both the challenges of enterprise\ntasks automation and the promise of agentic solutions. By offering a realistic\nbenchmark with interpretable evaluation, SCUBA aims to accelerate progress in\nbuilding reliable computer-use agents for complex business software ecosystems.",
      "url": "http://arxiv.org/abs/2509.26506v1",
      "published_time_eastern_timestamp": 1759250929.0
    },
    {
      "title": "An Agent-Based Simulation of Ageing Societies: Accessibility and Care\n  Dynamics in Remote Areas",
      "summary": "This paper presents an agent-based simulation of accessibility and care\ndynamics in ageing societies, applied to the Italian inner area of Premeno\n(VB). The model integrates census and municipal data, drone-derived elevation\nmodels, GIS road networks, and survey-based caregiving information to generate\nsynthetic populations of older adults and their caregivers. Agents are\norganized into dyads with socio-economic and mobility attributes, enabling the\nsimulation of both micro-scale accessibility and meso-scale caregiving\noutcomes. Two scenarios are compared: a baseline and an alternative involving\nthe relocation of healthcare services. Key indicators include caregiver effort,\noverwhelmed caregivers, walkability, and unmet hours of care. Findings show\nthat while relocation improves walkability locally, it increases unmet care\nhours due to detours and reduced proximity. Household income emerges as the\nprimary driver of caregiver burden, with accessibility shaped by interactions\nbetween financial and mobility resources. Results highlight the need for\ninterventions tailored to context-specific constraints in remote ageing\ncommunities.",
      "url": "http://arxiv.org/abs/2509.26496v1",
      "published_time_eastern_timestamp": 1759250434.0
    },
    {
      "title": "OffTopicEval: When Large Language Models Enter the Wrong Chat, Almost\n  Always!",
      "summary": "Large Language Model (LLM) safety is one of the most pressing challenges for\nenabling wide-scale deployment. While most studies and global discussions focus\non generic harms, such as models assisting users in harming themselves or\nothers, enterprises face a more fundamental concern: whether LLM-based agents\nare safe for their intended use case. To address this, we introduce operational\nsafety, defined as an LLM's ability to appropriately accept or refuse user\nqueries when tasked with a specific purpose. We further propose OffTopicEval,\nan evaluation suite and benchmark for measuring operational safety both in\ngeneral and within specific agentic use cases. Our evaluations on six model\nfamilies comprising 20 open-weight LLMs reveal that while performance varies\nacross models, all of them remain highly operationally unsafe. Even the\nstrongest models -- Qwen-3 (235B) with 77.77\\% and Mistral (24B) with 79.96\\%\n-- fall far short of reliable operational safety, while GPT models plateau in\nthe 62--73\\% range, Phi achieves only mid-level scores (48--70\\%), and Gemma\nand Llama-3 collapse to 39.53\\% and 23.84\\%, respectively. While operational\nsafety is a core model alignment issue, to suppress these failures, we propose\nprompt-based steering methods: query grounding (Q-ground) and system-prompt\ngrounding (P-ground), which substantially improve OOD refusal. Q-ground\nprovides consistent gains of up to 23\\%, while P-ground delivers even larger\nboosts, raising Llama-3.3 (70B) by 41\\% and Qwen-3 (30B) by 27\\%. These results\nhighlight both the urgent need for operational safety interventions and the\npromise of prompt-based steering as a first step toward more reliable LLM-based\nagents.",
      "url": "http://arxiv.org/abs/2509.26495v1",
      "published_time_eastern_timestamp": 1759250357.0
    },
    {
      "title": "VitaBench: Benchmarking LLM Agents with Versatile Interactive Tasks in\n  Real-world Applications",
      "summary": "As LLM-based agents are increasingly deployed in real-life scenarios,\nexisting benchmarks fail to capture their inherent complexity of handling\nextensive information, leveraging diverse resources, and managing dynamic user\ninteractions. To address this gap, we introduce VitaBench, a challenging\nbenchmark that evaluates agents on versatile interactive tasks grounded in\nreal-world settings. Drawing from daily applications in food delivery, in-store\nconsumption, and online travel services, VitaBench presents agents with the\nmost complex life-serving simulation environment to date, comprising 66 tools.\nThrough a framework that eliminates domain-specific policies, we enable\nflexible composition of these scenarios and tools, yielding 100 cross-scenario\ntasks (main results) and 300 single-scenario tasks. Each task is derived from\nmultiple real user requests and requires agents to reason across temporal and\nspatial dimensions, utilize complex tool sets, proactively clarify ambiguous\ninstructions, and track shifting user intent throughout multi-turn\nconversations. Moreover, we propose a rubric-based sliding window evaluator,\nenabling robust assessment of diverse solution pathways in complex environments\nand stochastic interactions. Our comprehensive evaluation reveals that even the\nmost advanced models achieve only 30% success rate on cross-scenario tasks, and\nless than 50% success rate on others. Overall, we believe VitaBench will serve\nas a valuable resource for advancing the development of AI agents in practical\nreal-world applications. The code, dataset, and leaderboard are available at\nhttps://vitabench.github.io/",
      "url": "http://arxiv.org/abs/2509.26490v1",
      "published_time_eastern_timestamp": 1759250029.0
    },
    {
      "title": "ErrorPrism: Reconstructing Error Propagation Paths in Cloud Service\n  Systems",
      "summary": "Reliability management in cloud service systems is challenging due to the\ncascading effect of failures. Error wrapping, a practice prevalent in modern\nmicroservice development, enriches errors with context at each layer of the\nfunction call stack, constructing an error chain that describes a failure from\nits technical origin to its business impact. However, this also presents a\nsignificant traceability problem when recovering the complete error propagation\npath from the final log message back to its source. Existing approaches are\nineffective at addressing this problem. To fill this gap, we present ErrorPrism\nin this work for automated reconstruction of error propagation paths in\nproduction microservice systems. ErrorPrism first performs static analysis on\nservice code repositories to build a function call graph and map log strings to\nrelevant candidate functions. This significantly reduces the path search space\nfor subsequent analysis. Then, ErrorPrism employs an LLM agent to perform an\niterative backward search to accurately reconstruct the complete, multi-hop\nerror path. Evaluated on 67 production microservices at ByteDance, ErrorPrism\nachieves 97.0% accuracy in reconstructing paths for 102 real-world errors,\noutperforming existing static analysis and LLM-based approaches. ErrorPrism\nprovides an effective and practical tool for root cause analysis in industrial\nmicroservice systems.",
      "url": "http://arxiv.org/abs/2509.26463v1",
      "published_time_eastern_timestamp": 1759248801.0
    },
    {
      "title": "CreAgentive: An Agent Workflow Driven Multi-Category Creative Generation\n  Engine",
      "summary": "We present CreAgentive, an agent workflow driven multi-category creative\ngeneration engine that addresses four key limitations of contemporary large\nlanguage models in writing stories, drama and other categories of creatives:\nrestricted genre diversity, insufficient output length, weak narrative\ncoherence, and inability to enforce complex structural constructs. At its core,\nCreAgentive employs a Story Prototype, which is a genre-agnostic, knowledge\ngraph-based narrative representation that decouples story logic from stylistic\nrealization by encoding characters, events, and environments as semantic\ntriples. CreAgentive engages a three-stage agent workflow that comprises: an\nInitialization Stage that constructs a user-specified narrative skeleton; a\nGeneration Stage in which long- and short-term objectives guide multi-agent\ndialogues to instantiate the Story Prototype; a Writing Stage that leverages\nthis prototype to produce multi-genre text with advanced structures such as\nretrospection and foreshadowing. This architecture reduces storage redundancy\nand overcomes the typical bottlenecks of long-form generation. In extensive\nexperiments, CreAgentive generates thousands of chapters with stable quality\nand low cost (less than $1 per 100 chapters) using a general-purpose backbone\nmodel. To evaluate performance, we define a two-dimensional framework with 10\nnarrative indicators measuring both quality and length. Results show that\nCreAgentive consistently outperforms strong baselines and achieves robust\nperformance across diverse genres, approaching the quality of human-authored\nnovels.",
      "url": "http://arxiv.org/abs/2509.26461v1",
      "published_time_eastern_timestamp": 1759248752.0
    },
    {
      "title": "ACT: Agentic Classification Tree",
      "summary": "When used in high-stakes settings, AI systems are expected to produce\ndecisions that are transparent, interpretable, and auditable, a requirement\nincreasingly expected by regulations. Decision trees such as CART provide clear\nand verifiable rules, but they are restricted to structured tabular data and\ncannot operate directly on unstructured inputs such as text. In practice, large\nlanguage models (LLMs) are widely used for such data, yet prompting strategies\nsuch as chain-of-thought or prompt optimization still rely on free-form\nreasoning, limiting their ability to ensure trustworthy behaviors. We present\nthe Agentic Classification Tree (ACT), which extends decision-tree methodology\nto unstructured inputs by formulating each split as a natural-language\nquestion, refined through impurity-based evaluation and LLM feedback via\nTextGrad. Experiments on text benchmarks show that ACT matches or surpasses\nprompting-based baselines while producing transparent and interpretable\ndecision paths.",
      "url": "http://arxiv.org/abs/2509.26433v1",
      "published_time_eastern_timestamp": 1759247648.0
    },
    {
      "title": "PANDA: Towards Generalist Video Anomaly Detection via Agentic AI\n  Engineer",
      "summary": "Video anomaly detection (VAD) is a critical yet challenging task due to the\ncomplex and diverse nature of real-world scenarios. Previous methods typically\nrely on domain-specific training data and manual adjustments when applying to\nnew scenarios and unseen anomaly types, suffering from high labor costs and\nlimited generalization. Therefore, we aim to achieve generalist VAD, i.e.,\nautomatically handle any scene and any anomaly types without training data or\nhuman involvement. In this work, we propose PANDA, an agentic AI engineer based\non MLLMs. Specifically, we achieve PANDA by comprehensively devising four key\ncapabilities: (1) self-adaptive scene-aware strategy planning, (2) goal-driven\nheuristic reasoning, (3) tool-augmented self-reflection, and (4) self-improving\nchain-of-memory. Concretely, we develop a self-adaptive scene-aware RAG\nmechanism, enabling PANDA to retrieve anomaly-specific knowledge for anomaly\ndetection strategy planning. Next, we introduce a latent anomaly-guided\nheuristic prompt strategy to enhance reasoning precision. Furthermore, PANDA\nemploys a progressive reflection mechanism alongside a suite of context-aware\ntools to iteratively refine decision-making in complex scenarios. Finally, a\nchain-of-memory mechanism enables PANDA to leverage historical experiences for\ncontinual performance improvement. Extensive experiments demonstrate that PANDA\nachieves state-of-the-art performance in multi-scenario, open-set, and complex\nscenario settings without training and manual involvement, validating its\ngeneralizable and robust anomaly detection capability. Code is released at\nhttps://github.com/showlab/PANDA.",
      "url": "http://arxiv.org/abs/2509.26386v1",
      "published_time_eastern_timestamp": 1759245583.0
    },
    {
      "title": "Efficient and Transferable Agentic Knowledge Graph RAG via Reinforcement\n  Learning",
      "summary": "Knowledge-graph retrieval-augmented generation (KG-RAG) couples large\nlanguage models (LLMs) with structured, verifiable knowledge graphs (KGs) to\nreduce hallucinations and expose reasoning traces. However, many KG-RAG systems\ncompose multiple LLM modules (e.g planning, reasoning, and responding),\ninflating inference cost and binding behavior to a specific target KG. To\naddress this, we introduce KG-R1, an agentic KG retrieval-augmented generation\n(KG-RAG) framework through reinforcement learning (RL). KG-R1 utilizes a single\nagent that interacts with KGs as its environment, learning to retrieve at each\nstep and incorporating the retrieved information into its reasoning and\ngeneration. The process is optimized through end-to-end RL. In controlled\nexperiments across Knowledge-Graph Question Answering (KGQA) benchmarks, our\nmethod demonstrates both efficiency and transferability: Using Qwen-2.5-3B,\nKG-R1 improves answer accuracy with fewer generation tokens than prior\nmulti-module workflow methods that use larger foundation or fine-tuned models.\nFurthermore, KG-R1 enables plug and play: after training, it maintains strong\naccuracy on new KGs without modification. These properties make KG-R1 a\npromising KG-RAG framework for real-world deployment. Our code is publicly\navailable at https://github.com/Jinyeop3110/KG-R1.",
      "url": "http://arxiv.org/abs/2509.26383v2",
      "published_time_eastern_timestamp": 1759245264.0
    },
    {
      "title": "SDA-PLANNER: State-Dependency Aware Adaptive Planner for Embodied Task\n  Planning",
      "summary": "Embodied task planning requires agents to produce executable actions in a\nclose-loop manner within the environment. With progressively improving\ncapabilities of LLMs in task decomposition, planning, and generalization,\ncurrent embodied task planning methods adopt LLM-based architecture.However,\nexisting LLM-based planners remain limited in three aspects, i.e., fixed\nplanning paradigms, lack of action sequence constraints, and error-agnostic. In\nthis work, we propose SDA-PLANNER, enabling an adaptive planning paradigm,\nstate-dependency aware and error-aware mechanisms for comprehensive embodied\ntask planning. Specifically, SDA-PLANNER introduces a State-Dependency Graph to\nexplicitly model action preconditions and effects, guiding the dynamic\nrevision. To handle execution error, it employs an error-adaptive replanning\nstrategy consisting of Error Backtrack and Diagnosis and Adaptive Action\nSubTree Generation, which locally reconstructs the affected portion of the plan\nbased on the current environment state. Experiments demonstrate that\nSDA-PLANNER consistently outperforms baselines in success rate and goal\ncompletion, particularly under diverse error conditions.",
      "url": "http://arxiv.org/abs/2509.26375v1",
      "published_time_eastern_timestamp": 1759244879.0
    },
    {
      "title": "Your Agent May Misevolve: Emergent Risks in Self-evolving LLM Agents",
      "summary": "Advances in Large Language Models (LLMs) have enabled a new class of\nself-evolving agents that autonomously improve through interaction with the\nenvironment, demonstrating strong capabilities. However, self-evolution also\nintroduces novel risks overlooked by current safety research. In this work, we\nstudy the case where an agent's self-evolution deviates in unintended ways,\nleading to undesirable or even harmful outcomes. We refer to this as\nMisevolution. To provide a systematic investigation, we evaluate misevolution\nalong four key evolutionary pathways: model, memory, tool, and workflow. Our\nempirical findings reveal that misevolution is a widespread risk, affecting\nagents built even on top-tier LLMs (e.g., Gemini-2.5-Pro). Different emergent\nrisks are observed in the self-evolutionary process, such as the degradation of\nsafety alignment after memory accumulation, or the unintended introduction of\nvulnerabilities in tool creation and reuse. To our knowledge, this is the first\nstudy to systematically conceptualize misevolution and provide empirical\nevidence of its occurrence, highlighting an urgent need for new safety\nparadigms for self-evolving agents. Finally, we discuss potential mitigation\nstrategies to inspire further research on building safer and more trustworthy\nself-evolving agents. Our code and data are available at\nhttps://github.com/ShaoShuai0605/Misevolution . Warning: this paper includes\nexamples that may be offensive or harmful in nature.",
      "url": "http://arxiv.org/abs/2509.26354v1",
      "published_time_eastern_timestamp": 1759244155.0
    },
    {
      "title": "Interactive Learning for LLM Reasoning",
      "summary": "Existing multi-agent learning approaches have developed interactive training\nenvironments to explicitly promote collaboration among multiple Large Language\nModels (LLMs), thereby constructing stronger multi-agent systems (MAS).\nHowever, during inference, they require re-executing the MAS to obtain final\nsolutions, which diverges from human cognition that individuals can enhance\ntheir reasoning capabilities through interactions with others and resolve\nquestions independently in the future. To investigate whether multi-agent\ninteraction can enhance LLMs' independent problem-solving ability, we introduce\nILR, a novel co-learning framework for MAS that integrates two key components:\nDynamic Interaction and Perception Calibration. Specifically, Dynamic\nInteraction first adaptively selects either cooperative or competitive\nstrategies depending on question difficulty and model ability. LLMs then\nexchange information through Idea3 (Idea Sharing, Idea Analysis, and Idea\nFusion), an innovative interaction paradigm designed to mimic human discussion,\nbefore deriving their respective final answers. In Perception Calibration, ILR\nemploys Group Relative Policy Optimization (GRPO) to train LLMs while\nintegrating one LLM's reward distribution characteristics into another's reward\nfunction, thereby enhancing the cohesion of multi-agent interactions. We\nvalidate ILR on three LLMs across two model families of varying scales,\nevaluating performance on five mathematical benchmarks and one coding\nbenchmark. Experimental results show that ILR consistently outperforms\nsingle-agent learning, yielding an improvement of up to 5% over the strongest\nbaseline. We further discover that Idea3 can enhance the robustness of stronger\nLLMs during multi-agent inference, and dynamic interaction types can boost\nmulti-agent learning compared to pure cooperative or competitive strategies.",
      "url": "http://arxiv.org/abs/2509.26306v3",
      "published_time_eastern_timestamp": 1759242091.0
    }
  ]
}