{
  "last_updated": "2025-10-15T02:18:41.226306-04:00",
  "papers": [
    {
      "title": "DeepMMSearch-R1: Empowering Multimodal LLMs in Multimodal Web Search",
      "summary": "Multimodal Large Language Models (MLLMs) in real-world applications require\naccess to external knowledge sources and must remain responsive to the dynamic\nand ever-changing real-world information in order to address\ninformation-seeking and knowledge-intensive user queries. Existing approaches,\nsuch as retrieval augmented generation (RAG) methods, search agents, and search\nequipped MLLMs, often suffer from rigid pipelines, excessive search calls, and\npoorly constructed search queries, which result in inefficiencies and\nsuboptimal outcomes. To address these limitations, we present DeepMMSearch-R1,\nthe first multimodal LLM capable of performing on-demand, multi-turn web\nsearches and dynamically crafting queries for both image and text search tools.\nSpecifically, DeepMMSearch-R1 can initiate web searches based on relevant crops\nof the input image making the image search more effective, and can iteratively\nadapt text search queries based on retrieved information, thereby enabling\nself-reflection and self-correction. Our approach relies on a two-stage\ntraining pipeline: a cold start supervised finetuning phase followed by an\nonline reinforcement learning optimization. For training, we introduce\nDeepMMSearchVQA, a novel multimodal VQA dataset created through an automated\npipeline intermixed with real-world information from web search tools. This\ndataset contains diverse, multi-hop queries that integrate textual and visual\ninformation, teaching the model when to search, what to search for, which\nsearch tool to use and how to reason over the retrieved information. We conduct\nextensive experiments across a range of knowledge-intensive benchmarks to\ndemonstrate the superiority of our approach. Finally, we analyze the results\nand provide insights that are valuable for advancing multimodal web-search.",
      "url": "http://arxiv.org/abs/2510.12801v1",
      "published_time_eastern_timestamp": 1760464798.0
    },
    {
      "title": "Ax-Prover: A Deep Reasoning Agentic Framework for Theorem Proving in\n  Mathematics and Quantum Physics",
      "summary": "We present Ax-Prover, a multi-agent system for automated theorem proving in\nLean that can solve problems across diverse scientific domains and operate\neither autonomously or collaboratively with human experts. To achieve this,\nAx-Prover approaches scientific problem solving through formal proof\ngeneration, a process that demands both creative reasoning and strict syntactic\nrigor. Ax-Prover meets this challenge by equipping Large Language Models\n(LLMs), which provide knowledge and reasoning, with Lean tools via the Model\nContext Protocol (MCP), which ensure formal correctness. To evaluate its\nperformance as an autonomous prover, we benchmark our approach against frontier\nLLMs and specialized prover models on two public math benchmarks and on two\nLean benchmarks we introduce in the fields of abstract algebra and quantum\ntheory. On public datasets, Ax-Prover is competitive with state-of-the-art\nprovers, while it largely outperform them on the new benchmarks. This shows\nthat, unlike specialized systems that struggle to generalize, our tool-based\nagentic theorem prover approach offers a generalizable methodology for formal\nverification across diverse scientific domains. Furthermore, we demonstrate\nAx-Prover's assistant capabilities in a practical use case, showing how it\nenabled an expert mathematician to formalize the proof of a complex\ncryptography theorem.",
      "url": "http://arxiv.org/abs/2510.12787v1",
      "published_time_eastern_timestamp": 1760464624.0
    },
    {
      "title": "Dr.LLM: Dynamic Layer Routing in LLMs",
      "summary": "Large Language Models (LLMs) process every token through all layers of a\ntransformer stack, causing wasted computation on simple queries and\ninsufficient flexibility for harder ones that need deeper reasoning.\nAdaptive-depth methods can improve efficiency, but prior approaches rely on\ncostly inference-time search, architectural changes, or large-scale retraining,\nand in practice often degrade accuracy despite efficiency gains. We introduce\nDr.LLM, Dynamic routing of Layers for LLMs, a retrofittable framework that\nequips pretrained models with lightweight per-layer routers deciding to skip,\nexecute, or repeat a block. Routers are trained with explicit supervision:\nusing Monte Carlo Tree Search (MCTS), we derive high-quality layer\nconfigurations that preserve or improve accuracy under a compute budget. Our\ndesign, windowed pooling for stable routing, focal loss with class balancing,\nand bottleneck MLP routers, ensures robustness under class imbalance and long\nsequences. On ARC (logic) and DART (math), Dr.LLM improves accuracy by up to\n+3.4%p while saving 5 layers per example on average. Routers generalize to\nout-of-domain tasks (MMLU, GSM8k, AIME, TruthfulQA, SQuADv2, GPQA, PIQA,\nAGIEval) with only 0.85% accuracy drop while retaining efficiency, and\noutperform prior routing methods by up to +7.7%p. Overall, Dr.LLM shows that\nexplicitly supervised routers retrofit frozen LLMs for budget-aware,\naccuracy-driven inference without altering base weights.",
      "url": "http://arxiv.org/abs/2510.12773v1",
      "published_time_eastern_timestamp": 1760464286.0
    },
    {
      "title": "Language Models Model Language",
      "summary": "Linguistic commentary on LLMs, heavily influenced by the theoretical\nframeworks of de Saussure and Chomsky, is often speculative and unproductive.\nCritics challenge whether LLMs can legitimately model language, citing the need\nfor \"deep structure\" or \"grounding\" to achieve an idealized linguistic\n\"competence.\" We argue for a radical shift in perspective towards the\nempiricist principles of Witold Ma\\'nczak, a prominent general and historical\nlinguist. He defines language not as a \"system of signs\" or a \"computational\nsystem of the brain\" but as the totality of all that is said and written. Above\nall, he identifies frequency of use of particular language elements as\nlanguage's primary governing principle. Using his framework, we challenge prior\ncritiques of LLMs and provide a constructive guide for designing, evaluating,\nand interpreting language models.",
      "url": "http://arxiv.org/abs/2510.12766v1",
      "published_time_eastern_timestamp": 1760463931.0
    },
    {
      "title": "CTRL-Rec: Controlling Recommender Systems With Natural Language",
      "summary": "When users are dissatisfied with recommendations from a recommender system,\nthey often lack fine-grained controls for changing them. Large language models\n(LLMs) offer a solution by allowing users to guide their recommendations\nthrough natural language requests (e.g., \"I want to see respectful posts with a\ndifferent perspective than mine\"). We propose a method, CTRL-Rec, that allows\nfor natural language control of traditional recommender systems in real-time\nwith computational efficiency. Specifically, at training time, we use an LLM to\nsimulate whether users would approve of items based on their language requests,\nand we train embedding models that approximate such simulated judgments. We\nthen integrate these user-request-based predictions into the standard weighting\nof signals that traditional recommender systems optimize. At deployment time,\nwe require only a single LLM embedding computation per user request, allowing\nfor real-time control of recommendations. In experiments with the MovieLens\ndataset, our method consistently allows for fine-grained control across a\ndiversity of requests. In a study with 19 Letterboxd users, we find that\nCTRL-Rec was positively received by users and significantly enhanced users'\nsense of control and satisfaction with recommendations compared to traditional\ncontrols.",
      "url": "http://arxiv.org/abs/2510.12742v1",
      "published_time_eastern_timestamp": 1760462404.0
    },
    {
      "title": "Data-Model Co-Evolution: Growing Test Sets to Refine LLM Behavior",
      "summary": "A long-standing challenge in machine learning has been the rigid separation\nbetween data work and model refinement, enforced by slow fine-tuning cycles.\nThe rise of Large Language Models (LLMs) overcomes this historical barrier,\nallowing applications developers to instantly govern model behavior by editing\nprompt instructions. This shift enables a new paradigm: data-model\nco-evolution, where a living test set and a model's instructions evolve in\ntandem. We operationalize this paradigm in an interactive system designed to\naddress the critical challenge of encoding subtle, domain-specific policies\ninto prompt instructions. The system's structured workflow guides people to\ndiscover edge cases, articulate rationales for desired behavior, and\niteratively evaluate instruction revisions against a growing test set. A user\nstudy shows our workflow helps participants refine instructions systematically\nand specify ambiguous policies more concretely. This work points toward more\nrobust and responsible LLM applications through human-in-the-loop development\naligned with local preferences and policies.",
      "url": "http://arxiv.org/abs/2510.12728v1",
      "published_time_eastern_timestamp": 1760461657.0
    },
    {
      "title": "CARVQ: Corrective Adaptor with Group Residual Vector Quantization for\n  LLM Embedding Compression",
      "summary": "Large Language Models (LLMs) typically rely on a large number of parameters\nfor token embedding, leading to substantial storage requirements and memory\nfootprints. In particular, LLMs deployed on edge devices are memory-bound, and\nreducing the memory footprint by compressing the embedding layer not only frees\nup the memory bandwidth but also speeds up inference. To address this, we\nintroduce CARVQ, a post-training novel Corrective Adaptor combined with group\nResidual Vector Quantization. CARVQ relies on the composition of both linear\nand non-linear maps and mimics the original model embedding to compress to\napproximately 1.6 bits without requiring specialized hardware to support\nlower-bit storage. We test our method on pre-trained LLMs such as LLaMA-3.2-1B,\nLLaMA-3.2-3B, LLaMA-3.2-3B-Instruct, LLaMA-3.1-8B, Qwen2.5-7B, Qwen2.5-Math-7B\nand Phi-4, evaluating on common generative, discriminative, math and reasoning\ntasks. We show that in most cases, CARVQ can achieve lower average\nbitwidth-per-parameter while maintaining reasonable perplexity and accuracy\ncompared to scalar quantization. Our contributions include a novel compression\ntechnique that is compatible with state-of-the-art transformer quantization\nmethods and can be seamlessly integrated into any hardware supporting 4-bit\nmemory to reduce the model's memory footprint in memory-constrained devices.\nThis work demonstrates a crucial step toward the efficient deployment of LLMs\non edge devices.",
      "url": "http://arxiv.org/abs/2510.12721v1",
      "published_time_eastern_timestamp": 1760461213.0
    },
    {
      "title": "Beyond Seeing: Evaluating Multimodal LLMs on Tool-Enabled Image\n  Perception, Transformation, and Reasoning",
      "summary": "Multimodal Large Language Models (MLLMs) are increasingly applied in\nreal-world scenarios where user-provided images are often imperfect, requiring\nactive image manipulations such as cropping, editing, or enhancement to uncover\nsalient visual cues. Beyond static visual perception, MLLMs must also think\nwith images: dynamically transforming visual content and integrating it with\nother tools to solve complex tasks. However, this shift from treating vision as\npassive context to a manipulable cognitive workspace remains underexplored.\nMost existing benchmarks still follow a think about images paradigm, where\nimages are regarded as static inputs. To address this gap, we introduce IRIS,\nan Interactive Reasoning with Images and Systems that evaluates MLLMs' ability\nto perceive, transform, and reason across complex visual-textual tasks under\nthe think with images paradigm. IRIS comprises 1,204 challenging, open-ended\nvision tasks (603 single-turn, 601 multi-turn) spanning across five diverse\ndomains, each paired with detailed rubrics to enable systematic evaluation. Our\nevaluation shows that current MLLMs struggle with tasks requiring effective\nintegration of vision and general-purpose tools. Even the strongest model\n(GPT-5-think) reaches only 18.68% pass rate. We further observe divergent\ntool-use behaviors, with OpenAI models benefiting from diverse image\nmanipulations while Gemini-2.5-pro shows no improvement. By introducing the\nfirst benchmark centered on think with images, IRIS offers critical insights\nfor advancing visual intelligence in MLLMs.",
      "url": "http://arxiv.org/abs/2510.12712v1",
      "published_time_eastern_timestamp": 1760460649.0
    },
    {
      "title": "Beyond Postconditions: Can Large Language Models infer Formal Contracts\n  for Automatic Software Verification?",
      "summary": "Automatic software verifiers have become increasingly effective at the task\nof checking software against (formal) specifications. Yet, their adoption in\npractice has been hampered by the lack of such specifications in real world\ncode. Large Language Models (LLMs) have shown promise in inferring formal\npostconditions from natural language hints embedded in code such as function\nnames, comments or documentation. Using the generated postconditions as\nspecifications in a subsequent verification, however, often leads verifiers to\nsuggest invalid inputs, hinting at potential issues that ultimately turn out to\nbe false alarms.\n  To address this, we revisit the problem of specification inference from\nnatural language in the context of automatic software verification. In the\nprocess, we introduce NL2Contract, the task of employing LLMs to translate\ninformal natural language into formal functional contracts, consisting of\npostconditions as well as preconditions. We introduce metrics to validate and\ncompare different NL2Contract approaches, using soundness, bug discriminative\npower of the generated contracts and their usability in the context of\nautomatic software verification as key metrics. We evaluate NL2Contract with\ndifferent LLMs and compare it to the task of postcondition generation\nnl2postcond. Our evaluation shows that (1) LLMs are generally effective at\ngenerating functional contracts sound for all possible inputs, (2) the\ngenerated contracts are sufficiently expressive for discriminating buggy from\ncorrect behavior, and (3) verifiers supplied with LLM inferred functional\ncontracts produce fewer false alarms than when provided with postconditions\nalone. Further investigations show that LLM inferred preconditions generally\nalign well with developers intentions which allows us to use automatic software\nverifiers to catch real-world bugs.",
      "url": "http://arxiv.org/abs/2510.12702v1",
      "published_time_eastern_timestamp": 1760459859.0
    },
    {
      "title": "Generation Space Size: Understanding and Calibrating Open-Endedness of\n  LLM Generations",
      "summary": "Different open-ended generation tasks require different degrees of output\ndiversity. However, current LLMs are often miscalibrated. They collapse to\noverly homogeneous outputs for creative tasks and hallucinate diverse but\nincorrect responses for factual tasks. We argue that these two failure modes\nare unified by, and can both be addressed by, the notion of effective\ngeneration space size (GSS) -- the set of semantically distinct outputs a model\nconsiders for a prompt. We present GSSBench, a task suite of prompt pairs with\nground-truth GSS relationships to assess different metrics and understand where\nmodels diverge from desired behavior. We find that hallucination detection\nmetrics, particularly EigenScore, consistently outperform standard diversity\nand uncertainty quantification metrics, while using only model internals,\nproviding interpretable insights into a model's internal task representations.\nWe demonstrate three applications of GSS: (1) detecting prompt ambiguity and\npredicting clarification questions for better grounding, (2) interpreting\noverthinking and underthinking in reasoning models, and (3) steering models to\nexpand their generation space to yield high-quality and diverse outputs.",
      "url": "http://arxiv.org/abs/2510.12699v1",
      "published_time_eastern_timestamp": 1760459494.0
    },
    {
      "title": "Multi-Agent Debate for LLM Judges with Adaptive Stability Detection",
      "summary": "With advancements in reasoning capabilities, Large Language Models (LLMs) are\nincreasingly employed for automated judgment tasks. While LLMs-as-Judges offer\npromise in automating evaluations, current approaches often rely on simplistic\naggregation methods (e.g., majority voting), which can fail even when\nindividual agents provide correct answers. To address this, we propose a\nmulti-agent debate judge framework where agents collaboratively reason and\niteratively refine their responses. We formalize the debate process\nmathematically, analyzing agent interactions and proving that debate amplifies\ncorrectness compared to static ensembles. To enhance efficiency, we introduce a\nstability detection mechanism that models judge consensus dynamics via a\ntime-varying Beta-Binomial mixture, with adaptive stopping based on\ndistributional similarity (Kolmogorov-Smirnov test). This mechanism models the\njudges' collective correct rate dynamics using a time-varying mixture of\nBeta-Binomial distributions and employs an adaptive stopping criterion based on\ndistributional similarity (Kolmogorov-Smirnov statistic). Experiments across\nmultiple benchmarks and models demonstrate that our framework improves judgment\naccuracy over majority voting while maintaining computational efficiency.",
      "url": "http://arxiv.org/abs/2510.12697v1",
      "published_time_eastern_timestamp": 1760459430.0
    },
    {
      "title": "From Delegates to Trustees: How Optimizing for Long-Term Interests\n  Shapes Bias and Alignment in LLM",
      "summary": "Large language models (LLMs) have shown promising accuracy in predicting\nsurvey responses and policy preferences, which has increased interest in their\npotential to represent human interests in various domains. Most existing\nresearch has focused on behavioral cloning, effectively evaluating how well\nmodels reproduce individuals' expressed preferences. Drawing on theories of\npolitical representation, we highlight an underexplored design trade-off:\nwhether AI systems should act as delegates, mirroring expressed preferences, or\nas trustees, exercising judgment about what best serves an individual's\ninterests. This trade-off is closely related to issues of LLM sycophancy, where\nmodels can encourage behavior or validate beliefs that may be aligned with a\nuser's short-term preferences, but is detrimental to their long-term interests.\nThrough a series of experiments simulating votes on various policy issues in\nthe U.S. context, we apply a temporal utility framework that weighs short and\nlong-term interests (simulating a trustee role) and compare voting outcomes to\nbehavior-cloning models (simulating a delegate). We find that trustee-style\npredictions weighted toward long-term interests produce policy decisions that\nalign more closely with expert consensus on well-understood issues, but also\nshow greater bias toward models' default stances on topics lacking clear\nagreement. These findings reveal a fundamental trade-off in designing AI\nsystems to represent human interests. Delegate models better preserve user\nautonomy but may diverge from well-supported policy positions, while trustee\nmodels can promote welfare on well-understood issues yet risk paternalism and\nbias on subjective topics.",
      "url": "http://arxiv.org/abs/2510.12689v1",
      "published_time_eastern_timestamp": 1760459059.0
    },
    {
      "title": "Demystifying Hybrid Thinking: Can LLMs Truly Switch Between Think and\n  No-Think?",
      "summary": "Hybrid thinking enables LLMs to switch between reasoning and direct\nanswering, offering a balance between efficiency and reasoning capability. Yet\nour experiments reveal that current hybrid thinking LLMs only achieve partial\nmode separation: reasoning behaviors often leak into the no-think mode. To\nunderstand and mitigate this, we analyze the factors influencing\ncontrollability and identify four that matter most: (1) larger data scale, (2)\nusing think and no-think answers from different questions rather than the same\nquestion, (3) a moderate increase in no-think data number, and (4) a two-phase\nstrategy that first trains reasoning ability and then applies hybrid think\ntraining. Building on these findings, we propose a practical recipe that,\ncompared to standard training, can maintain accuracy in both modes while\nsignificantly reducing no-think output length (from $1085$ to $585$ on MATH500)\nand occurrences of reasoning-supportive tokens such as ``\\texttt{wait}'' (from\n$5917$ to $522$ on MATH500). Our findings highlight the limitations of current\nhybrid thinking and offer directions for strengthening its controllability.",
      "url": "http://arxiv.org/abs/2510.12680v1",
      "published_time_eastern_timestamp": 1760458784.0
    },
    {
      "title": "The Role of Parametric Injection-A Systematic Study of Parametric\n  Retrieval-Augmented Generation",
      "summary": "Retrieval-augmented generation (RAG) enhances large language models (LLMs) by\nretrieving external documents. As an emerging form of RAG, parametric\nretrieval-augmented generation (PRAG) encodes documents as model parameters\n(i.e., LoRA modules) and injects these representations into the model during\ninference, enabling interaction between the LLM and documents at parametric\nlevel. Compared with directly placing documents in the input context, PRAG is\nmore efficient and has the potential to offer deeper model-document\ninteraction. Despite its growing attention, the mechanism underlying parametric\ninjection remains poorly understood. In this work, we present a systematic\nstudy of PRAG to clarify the role of parametric injection, showing that\nparameterized documents capture only partial semantic information of documents,\nand relying on them alone yields inferior performance compared to interaction\nat text level. However, these parametric representations encode high-level\ndocument information that can enhance the model's understanding of documents\nwithin the input context. When combined parameterized documents with textual\ndocuments, the model can leverage relevant information more effectively and\nbecome more robust to noisy inputs, achieving better performance than either\nsource alone. We recommend jointly using parameterized and textual documents\nand advocate for increasing the information content of parametric\nrepresentations to advance PRAG.",
      "url": "http://arxiv.org/abs/2510.12668v1",
      "published_time_eastern_timestamp": 1760457901.0
    },
    {
      "title": "Reasoning Pattern Matters: Learning to Reason without Human Rationales",
      "summary": "Large Language Models (LLMs) have demonstrated remarkable reasoning\ncapabilities under the widely adopted SFT+RLVR paradigm, which first performs\nSupervised Fine-Tuning (SFT) on human-annotated reasoning trajectories\n(rationales) to establish initial reasoning behaviors, then applies\nReinforcement Learning with Verifiable Rewards (RLVR) to optimize the model\nusing verifiable signals without golden rationales. However, annotating\nhigh-quality rationales for the SFT stage remains prohibitively expensive. This\npaper investigates when and how rationale annotation costs can be substantially\nreduced without compromising reasoning performance. We identify a broad class\nof problems, termed patterned reasoning tasks, where reasoning follows a fixed,\nprocedural strategy consistent across instances. Although instances vary in\ncontent such as domain knowledge, factual information, or numeric values, the\nsolution derives from applying a shared reasoning pattern. We argue that the\nsuccess of SFT+RLVR on such tasks primarily stems from its ability to enable\nmodels to internalize these reasoning patterns. Using numerical semantic\nmatching as a representative task, we provide both causal and behavioral\nevidence showing that reasoning patterns rather than the quantity or quality of\nrationales are the key determinant of performance. Building on these insights,\nwe propose Pattern-Aware LLMs as Rationale AnnOtators (PARO), a simple yet\neffective framework that enables LLMs to generate rationales aligned with\ntask-specific reasoning patterns without requiring human rationale annotations.\nExperiments show that PARO-generated rationales achieve comparable SFT+RLVR\nperformance to human rationales that are 10 times larger. These results suggest\nthat large-scale human rationale annotations can be replaced with LLM-based\nautomatic annotations requiring only limited human supervision over reasoning\npatterns.",
      "url": "http://arxiv.org/abs/2510.12643v1",
      "published_time_eastern_timestamp": 1760456078.0
    },
    {
      "title": "COSTAR-A: A prompting framework for enhancing Large Language Model\n  performance on Point-of-View questions",
      "summary": "Large Language Models (LLMs) are highly sensitive to prompt design, and\nmaking optimized prompting techniques is crucial for generating consistent,\nhigh-quality outputs. In this study, we introduce COSTAR-A, a novel prompt\nengineering framework that enhances the existing COSTAR method, which stands\nfor Context, Objective, Style, Tone, Audience, and Response, by adding the\n'Answer' component at the end. We demonstrate that while the original COSTAR\nframework improves prompt clarity and aligns outputs for larger LLMs, its\nperformance is less consistent with smaller, locally optimized models,\nparticularly in tasks that require more directive or constrained outputs.\nThrough a series of controlled prompt-output assessments with smaller (at most\n8 billion parameters), fine-tuned models, we found that COSTAR-A can enhance\nthe output structure and decisiveness of localized LLMs for certain tasks,\nalthough its effectiveness varies across models and use cases. Notably, the\nLlama 3.1-8B model exhibited performance improvements when prompted with\nCOSTAR-A compared to COSTAR alone. These findings emphasize the adaptability\nand scalability of COSTAR-A as a prompting framework, particularly in\ncomputationally efficient AI deployments on resource-constrained hardware.",
      "url": "http://arxiv.org/abs/2510.12637v1",
      "published_time_eastern_timestamp": 1760455881.0
    },
    {
      "title": "Memory as Action: Autonomous Context Curation for Long-Horizon Agentic\n  Tasks",
      "summary": "Large Language Models face challenges in long-horizon agentic tasks as their\nconstrained memory is easily overwhelmed by distracting or irrelevant context.\nExisting working memory methods typically rely on external, heuristic\nmechanisms that are decoupled from the agent's core policy. In this work, we\nreframe working memory management as a learnable, intrinsic capability. We\npropose a novel framework, Memory-as-Action, where an agent actively manages\nits working memory by executing explicit editing operations as part of a\nunified policy. This formulation allows an agent, trained via reinforcement\nlearning, to balance memory curation against long-term task objectives under\ngiven resource constraints. However, such memory editing actions break the\nstandard assumption of a continuously growing prefix in LLM interactions,\nleading to what we call trajectory fractures. These non-prefix changes disrupt\nthe causal continuity required by standard policy gradient methods, making\nthose methods inapplicable. To address this, we propose a new algorithm,\nDynamic Context Policy Optimization, which enables stable end-to-end\nreinforcement learning by segmenting trajectories at memory action points and\napplying trajectory-level advantages to the resulting action segments. Our\nresults demonstrate that jointly optimizing for task reasoning and memory\nmanagement in an end-to-end fashion not only reduces overall computational\nconsumption but also improves task performance, driven by adaptive context\ncuration strategies tailored to the model's intrinsic capabilities.",
      "url": "http://arxiv.org/abs/2510.12635v1",
      "published_time_eastern_timestamp": 1760455797.0
    },
    {
      "title": "Laminar: A Scalable Asynchronous RL Post-Training Framework",
      "summary": "Reinforcement learning (RL) post-training for Large Language Models (LLMs) is\nnow scaling to large clusters and running for extended durations to enhance\nmodel reasoning performance. However, the scalability of existing RL frameworks\nis limited, as extreme long-tail skewness in RL trajectory generation causes\nsevere GPU underutilization. Current asynchronous RL systems attempt to\nmitigate this, but they rely on global weight synchronization between the actor\nand all rollouts, which creates a rigid model update schedule. This global\nsynchronization is ill-suited for the highly skewed and evolving distribution\nof trajectory generation latency in RL training, crippling training efficiency.\nOur key insight is that efficient scaling requires breaking this lockstep\nthrough trajectory-level asynchrony, which generates and consumes each\ntrajectory independently. We propose Laminar, a scalable and robust RL\npost-training system built on a fully decoupled architecture. First, we replace\nglobal updates with a tier of relay workers acting as a distributed parameter\nservice. This enables asynchronous and fine-grained weight synchronization,\nallowing rollouts to pull the latest weight anytime without stalling the\nactor's training loop. Second, a dynamic repack mechanism consolidates\nlong-tail trajectories onto a few dedicated rollouts, maximizing generation\nthroughput. The fully decoupled design also isolates failures, ensuring\nrobustness for long-running jobs. Our evaluation on a 1024-GPU cluster shows\nthat Laminar achieves up to 5.48$\\times$ training throughput speedup over\nstate-of-the-art systems, while reducing model convergence time.",
      "url": "http://arxiv.org/abs/2510.12633v1",
      "published_time_eastern_timestamp": 1760455754.0
    },
    {
      "title": "ACADATA: Parallel Dataset of Academic Data for Machine Translation",
      "summary": "We present ACADATA, a high-quality parallel dataset for academic translation,\nthat consists of two subsets: ACAD-TRAIN, which contains approximately 1.5\nmillion author-generated paragraph pairs across 96 language directions and\nACAD-BENCH, a curated evaluation set of almost 6,000 translations covering 12\ndirections. To validate its utility, we fine-tune two Large Language Models\n(LLMs) on ACAD-TRAIN and benchmark them on ACAD-BENCH against specialized\nmachine-translation systems, general-purpose, open-weight LLMs, and several\nlarge-scale proprietary models. Experimental results demonstrate that\nfine-tuning on ACAD-TRAIN leads to improvements in academic translation quality\nby +6.1 and +12.4 d-BLEU points on average for 7B and 2B models respectively,\nwhile also improving long-context translation in a general domain by up to\n24.9% when translating out of English. The fine-tuned top-performing model\nsurpasses the best propietary and open-weight models on academic translation\ndomain. By releasing ACAD-TRAIN, ACAD-BENCH and the fine-tuned models, we\nprovide the community with a valuable resource to advance research in academic\ndomain and long-context translation.",
      "url": "http://arxiv.org/abs/2510.12621v1",
      "published_time_eastern_timestamp": 1760455206.0
    },
    {
      "title": "StyleDecipher: Robust and Explainable Detection of LLM-Generated Texts\n  with Stylistic Analysis",
      "summary": "With the increasing integration of large language models (LLMs) into\nopen-domain writing, detecting machine-generated text has become a critical\ntask for ensuring content authenticity and trust. Existing approaches rely on\nstatistical discrepancies or model-specific heuristics to distinguish between\nLLM-generated and human-written text. However, these methods struggle in\nreal-world scenarios due to limited generalization, vulnerability to\nparaphrasing, and lack of explainability, particularly when facing stylistic\ndiversity or hybrid human-AI authorship. In this work, we propose\nStyleDecipher, a robust and explainable detection framework that revisits\nLLM-generated text detection using combined feature extractors to quantify\nstylistic differences. By jointly modeling discrete stylistic indicators and\ncontinuous stylistic representations derived from semantic embeddings,\nStyleDecipher captures distinctive style-level divergences between human and\nLLM outputs within a unified representation space. This framework enables\naccurate, explainable, and domain-agnostic detection without requiring access\nto model internals or labeled segments. Extensive experiments across five\ndiverse domains, including news, code, essays, reviews, and academic abstracts,\ndemonstrate that StyleDecipher consistently achieves state-of-the-art in-domain\naccuracy. Moreover, in cross-domain evaluations, it surpasses existing\nbaselines by up to 36.30%, while maintaining robustness against adversarial\nperturbations and mixed human-AI content. Further qualitative and quantitative\nanalysis confirms that stylistic signals provide explainable evidence for\ndistinguishing machine-generated text. Our source code can be accessed at\nhttps://github.com/SiyuanLi00/StyleDecipher.",
      "url": "http://arxiv.org/abs/2510.12608v1",
      "published_time_eastern_timestamp": 1760454447.0
    }
  ]
}