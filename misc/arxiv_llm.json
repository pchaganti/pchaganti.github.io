{
  "last_updated": "2025-10-01T23:24:01.701850-04:00",
  "papers": [
    {
      "title": "Attention as a Compass: Efficient Exploration for Process-Supervised RL\n  in Reasoning Models",
      "summary": "Reinforcement Learning (RL) has shown remarkable success in enhancing the\nreasoning capabilities of Large Language Models (LLMs). Process-Supervised RL\n(PSRL) has emerged as a more effective paradigm compared to outcome-based RL.\nHowever, existing PSRL approaches suffer from limited exploration efficiency,\nboth in terms of branching positions and sampling. In this paper, we introduce\na novel PSRL framework (AttnRL), which enables efficient exploration for\nreasoning models. Motivated by preliminary observations that steps exhibiting\nhigh attention scores correlate with reasoning behaviors, we propose to branch\nfrom positions with high values. Furthermore, we develop an adaptive sampling\nstrategy that accounts for problem difficulty and historical batch size,\nensuring that the whole training batch maintains non-zero advantage values. To\nfurther improve sampling efficiency, we design a one-step off-policy training\npipeline for PSRL. Extensive experiments on multiple challenging mathematical\nreasoning benchmarks demonstrate that our method consistently outperforms prior\napproaches in terms of performance and sampling and training efficiency.",
      "url": "http://arxiv.org/abs/2509.26628v1",
      "published_time_eastern_timestamp": 1759255114.0
    },
    {
      "title": "Recursive Self-Aggregation Unlocks Deep Thinking in Large Language\n  Models",
      "summary": "Test-time scaling methods improve the capabilities of large language models\n(LLMs) by increasing the amount of compute used during inference to make a\nprediction. Inference-time compute can be scaled in parallel by choosing among\nmultiple independent solutions or sequentially through self-refinement. We\npropose Recursive Self-Aggregation (RSA), a test-time scaling method inspired\nby evolutionary methods that combines the benefits of both parallel and\nsequential scaling. Each step of RSA refines a population of candidate\nreasoning chains through aggregation of subsets to yield a population of\nimproved solutions, which are then used as the candidate pool for the next\niteration. RSA exploits the rich information embedded in the reasoning chains\n-- not just the final answers -- and enables bootstrapping from partially\ncorrect intermediate steps within different chains of thought. Empirically, RSA\ndelivers substantial performance gains with increasing compute budgets across\ndiverse tasks, model families and sizes. Notably, RSA enables\nQwen3-4B-Instruct-2507 to achieve competitive performance with larger reasoning\nmodels, including DeepSeek-R1 and o3-mini (high), while outperforming purely\nparallel and sequential scaling strategies across AIME-25, HMMT-25, Reasoning\nGym, LiveCodeBench-v6, and SuperGPQA. We further demonstrate that training the\nmodel to combine solutions via a novel aggregation-aware reinforcement learning\napproach yields significant performance gains. Code available at\nhttps://github.com/HyperPotatoNeo/RSA.",
      "url": "http://arxiv.org/abs/2509.26626v1",
      "published_time_eastern_timestamp": 1759255083.0
    },
    {
      "title": "Learning to See Before Seeing: Demystifying LLM Visual Priors from\n  Language Pre-training",
      "summary": "Large Language Models (LLMs), despite being trained on text alone,\nsurprisingly develop rich visual priors. These priors allow latent visual\ncapabilities to be unlocked for vision tasks with a relatively small amount of\nmultimodal data, and in some cases, to perform visual tasks without ever having\nseen an image. Through systematic analysis, we reveal that visual priors-the\nimplicit, emergent knowledge about the visual world acquired during language\npre-training-are composed of separable perception and reasoning priors with\nunique scaling trends and origins. We show that an LLM's latent visual\nreasoning ability is predominantly developed by pre-training on\nreasoning-centric data (e.g., code, math, academia) and scales progressively.\nThis reasoning prior acquired from language pre-training is transferable and\nuniversally applicable to visual reasoning. In contrast, a perception prior\nemerges more diffusely from broad corpora, and perception ability is more\nsensitive to the vision encoder and visual instruction tuning data. In\nparallel, text describing the visual world proves crucial, though its\nperformance impact saturates rapidly. Leveraging these insights, we propose a\ndata-centric recipe for pre-training vision-aware LLMs and verify it in 1T\ntoken scale pre-training. Our findings are grounded in over 100 controlled\nexperiments consuming 500,000 GPU-hours, spanning the full MLLM construction\npipeline-from LLM pre-training to visual alignment and supervised multimodal\nfine-tuning-across five model scales, a wide range of data categories and\nmixtures, and multiple adaptation setups. Along with our main findings, we\npropose and investigate several hypotheses, and introduce the Multi-Level\nExistence Bench (MLE-Bench). Together, this work provides a new way of\ndeliberately cultivating visual priors from language pre-training, paving the\nway for the next generation of multimodal LLMs.",
      "url": "http://arxiv.org/abs/2509.26625v1",
      "published_time_eastern_timestamp": 1759255064.0
    },
    {
      "title": "Black-box Context-free Grammar Inference for Readable & Natural Grammars",
      "summary": "Black-box context-free grammar inference is crucial for program analysis,\nreverse engineering, and security, yet existing tools such as Arvada, TreeVada,\nand Kedavra struggle with scalability, readability, and accuracy on large,\ncomplex languages. We present NatGI, a novel LLM-guided grammar inference\nframework that extends TreeVada's parse tree recovery with three key\ninnovations: bracket-guided bubble exploration, LLM-driven bubble generation\nand non-terminal labeling, and hierarchical delta debugging (HDD) for\nsystematic tree simplification. Bracket-guided exploration leverages syntactic\ncues such as parentheses to propose well-structured grammar fragments, while\nLLM guidance produces meaningful non-terminal names and selects more promising\nmerges. Finally, HDD incrementally reduces unnecessary rules, which makes the\ngrammars both compact and interpretable. In our experiments, we evaluate NatGI\non a comprehensive benchmark suite ranging from small languages to larger ones\nsuch as lua, c, and mysql. Our results show that NatGI consistently outperforms\nstrong baselines in terms of F1 score. On average, NatGI achieves an F1 score\nof 0.57, which is 25pp (percentage points) higher than the best-performing\nbaseline, TreeVada. In the case of interpretability, our generated grammars\nperform significantly better than those produced by existing approaches.\nLeveraging LLM-based node renaming and bubble exploration, NatGI produces rules\nwith meaningful non-terminal names and compact structures that align more\nclosely with human intuition. As a result, developers and researchers can\nachieve higher accuracy while still being able to easily inspect, verify, and\nreason about the structure and semantics of the induced grammars.",
      "url": "http://arxiv.org/abs/2509.26616v1",
      "published_time_eastern_timestamp": 1759254865.0
    },
    {
      "title": "MENLO: From Preferences to Proficiency -- Evaluating and Modeling\n  Native-like Quality Across 47 Languages",
      "summary": "Ensuring native-like quality of large language model (LLM) responses across\nmany languages is challenging. To address this, we introduce MENLO, a framework\nthat operationalizes the evaluation of native-like response quality based on\naudience design-inspired mechanisms. Using MENLO, we create a dataset of 6,423\nhuman-annotated prompt-response preference pairs covering four quality\ndimensions with high inter-annotator agreement in 47 language varieties. Our\nevaluation reveals that zero-shot LLM judges benefit significantly from\npairwise evaluation and our structured annotation rubrics, yet they still\nunderperform human annotators on our dataset. We demonstrate substantial\nimprovements through fine-tuning with reinforcement learning, reward shaping,\nand multi-task learning approaches. Additionally, we show that RL-trained\njudges can serve as generative reward models to enhance LLMs' multilingual\nproficiency, though discrepancies with human judgment remain. Our findings\nsuggest promising directions for scalable multilingual evaluation and\npreference alignment. We release our dataset and evaluation framework to\nsupport further research in multilingual LLM evaluation.",
      "url": "http://arxiv.org/abs/2509.26601v1",
      "published_time_eastern_timestamp": 1759254538.0
    },
    {
      "title": "Deconstructing Self-Bias in LLM-generated Translation Benchmarks",
      "summary": "As large language models (LLMs) begin to saturate existing benchmarks,\nautomated benchmark creation using LLMs (LLM as a benchmark) has emerged as a\nscalable alternative to slow and costly human curation. While these generated\ntest sets have to potential to cheaply rank models, we demonstrate a critical\nflaw. LLM generated benchmarks systematically favor the model that created the\nbenchmark, they exhibit self bias on low resource languages to English\ntranslation tasks. We show three key findings on automatic benchmarking of LLMs\nfor translation: First, this bias originates from two sources: the generated\ntest data (LLM as a testset) and the evaluation method (LLM as an evaluator),\nwith their combination amplifying the effect. Second, self bias in LLM as a\nbenchmark is heavily influenced by the model's generation capabilities in the\nsource language. For instance, we observe more pronounced bias in into English\ntranslation, where the model's generation system is developed, than in out of\nEnglish translation tasks. Third, we observe that low diversity in source text\nis one attribution to self bias. Our results suggest that improving the\ndiversity of these generated source texts can mitigate some of the observed\nself bias.",
      "url": "http://arxiv.org/abs/2509.26600v1",
      "published_time_eastern_timestamp": 1759254515.0
    },
    {
      "title": "Are Robust LLM Fingerprints Adversarially Robust?",
      "summary": "Model fingerprinting has emerged as a promising paradigm for claiming model\nownership. However, robustness evaluations of these schemes have mostly focused\non benign perturbations such as incremental fine-tuning, model merging, and\nprompting. Lack of systematic investigations into {\\em adversarial robustness}\nagainst a malicious model host leaves current systems vulnerable. To bridge\nthis gap, we first define a concrete, practical threat model against model\nfingerprinting. We then take a critical look at existing model fingerprinting\nschemes to identify their fundamental vulnerabilities. Based on these, we\ndevelop adaptive adversarial attacks tailored for each vulnerability, and\ndemonstrate that these can bypass model authentication completely for ten\nrecently proposed fingerprinting schemes while maintaining high utility of the\nmodel for the end users. Our work encourages fingerprint designers to adopt\nadversarial robustness by design. We end with recommendations for future\nfingerprinting methods.",
      "url": "http://arxiv.org/abs/2509.26598v1",
      "published_time_eastern_timestamp": 1759254429.0
    },
    {
      "title": "Exploring Large Language Model as an Interactive Sports Coach: Lessons\n  from a Single-Subject Half Marathon Preparation",
      "summary": "Large language models (LLMs) are emerging as everyday assistants, but their\nrole as longitudinal virtual coaches is underexplored. This two-month single\nsubject case study documents LLM guided half marathon preparation\n(July-September 2025). Using text based interactions and consumer app logs, the\nLLM acted as planner, explainer, and occasional motivator. Performance improved\nfrom sustaining 2 km at 7min 54sec per km to completing 21.1 km at 6min 30sec\nper km, with gains in cadence, pace HR coupling, and efficiency index trends.\nWhile causal attribution is limited without a control, outcomes demonstrate\nsafe, measurable progress. At the same time, gaps were evident, no realtime\nsensor integration, text only feedback, motivation support that was user\ninitiated, and limited personalization or safety guardrails. We propose design\nrequirements for next generation systems, persistent athlete models with\nexplicit guardrails, multimodal on device sensing, audio, haptic, visual\nfeedback, proactive motivation scaffolds, and privacy-preserving\npersonalization. This study offers grounded evidence and a design agenda for\nevolving LLMs from retrospective advisors to closed-loop coaching companions.",
      "url": "http://arxiv.org/abs/2509.26593v1",
      "published_time_eastern_timestamp": 1759254399.0
    },
    {
      "title": "Generating Difficult-to-Translate Texts",
      "summary": "Machine translation benchmarks sourced from the real world are quickly\nobsoleted, due to most examples being easy for state-of-the-art translation\nmodels. This limits the benchmark's ability to distinguish which model is\nbetter or to reveal models' weaknesses. Current methods for creating difficult\ntest cases, such as subsampling or from-scratch synthesis, either fall short of\nidentifying difficult examples or suffer from a lack of diversity and\nnaturalness. Inspired by the iterative process of human experts probing for\nmodel failures, we propose MT-breaker, a method where a large language model\niteratively refines a source text to increase its translation difficulty. The\nLLM iteratively queries a target machine translation model to guide its\ngeneration of difficult examples. Our approach generates examples that are more\nchallenging for the target MT model while preserving the diversity of natural\ntexts. While the examples are tailored to a particular machine translation\nmodel during the generation, the difficulty also transfers to other models and\nlanguages.",
      "url": "http://arxiv.org/abs/2509.26592v1",
      "published_time_eastern_timestamp": 1759254368.0
    },
    {
      "title": "Fairness Testing in Retrieval-Augmented Generation: How Small\n  Perturbations Reveal Bias in Small Language Models",
      "summary": "Large Language Models (LLMs) are widely used across multiple domains but\ncontinue to raise concerns regarding security and fairness. Beyond known attack\nvectors such as data poisoning and prompt injection, LLMs are also vulnerable\nto fairness bugs. These refer to unintended behaviors influenced by sensitive\ndemographic cues (e.g., race or sexual orientation) that should not affect\noutcomes. Another key issue is hallucination, where models generate plausible\nyet false information. Retrieval-Augmented Generation (RAG) has emerged as a\nstrategy to mitigate hallucinations by combining external retrieval with text\ngeneration. However, its adoption raises new fairness concerns, as the\nretrieved content itself may surface or amplify bias. This study conducts\nfairness testing through metamorphic testing (MT), introducing controlled\ndemographic perturbations in prompts to assess fairness in sentiment analysis\nperformed by three Small Language Models (SLMs) hosted on HuggingFace\n(Llama-3.2-3B-Instruct, Mistral-7B-Instruct-v0.3, and Llama-3.1-Nemotron-8B),\neach integrated into a RAG pipeline. Results show that minor demographic\nvariations can break up to one third of metamorphic relations (MRs). A detailed\nanalysis of these failures reveals a consistent bias hierarchy, with\nperturbations involving racial cues being the predominant cause of the\nviolations. In addition to offering a comparative evaluation, this work\nreinforces that the retrieval component in RAG must be carefully curated to\nprevent bias amplification. The findings serve as a practical alert for\ndevelopers, testers and small organizations aiming to adopt accessible SLMs\nwithout compromising fairness or reliability.",
      "url": "http://arxiv.org/abs/2509.26584v1",
      "published_time_eastern_timestamp": 1759254155.0
    },
    {
      "title": "Linking Process to Outcome: Conditional Reward Modeling for LLM\n  Reasoning",
      "summary": "Process Reward Models (PRMs) have emerged as a promising approach to enhance\nthe reasoning capabilities of large language models (LLMs) by guiding their\nstep-by-step reasoning toward a final answer. However, existing PRMs either\ntreat each reasoning step in isolation, failing to capture inter-step\ndependencies, or struggle to align process rewards with the final outcome.\nConsequently, the reward signal fails to respect temporal causality in\nsequential reasoning and faces ambiguous credit assignment. These limitations\nmake downstream models vulnerable to reward hacking and lead to suboptimal\nperformance. In this work, we propose Conditional Reward Modeling (CRM) that\nframes LLM reasoning as a temporal process leading to a correct answer. The\nreward of each reasoning step is not only conditioned on the preceding steps\nbut also explicitly linked to the final outcome of the reasoning trajectory. By\nenforcing conditional probability rules, our design captures the causal\nrelationships among reasoning steps, with the link to the outcome allowing\nprecise attribution of each intermediate step, thereby resolving credit\nassignment ambiguity. Further, through this consistent probabilistic modeling,\nthe rewards produced by CRM enable more reliable cross-sample comparison.\nExperiments across Best-of-N sampling, beam search and reinforcement learning\ndemonstrate that CRM consistently outperforms existing reward models, offering\na principled framework for enhancing LLM reasoning. In particular, CRM is more\nrobust to reward hacking and delivers stable downstream improvements without\nrelying on verifiable rewards derived from ground truth.",
      "url": "http://arxiv.org/abs/2509.26578v1",
      "published_time_eastern_timestamp": 1759253925.0
    },
    {
      "title": "Probing the Critical Point (CritPt) of AI Reasoning: a Frontier Physics\n  Research Benchmark",
      "summary": "While large language models (LLMs) with reasoning capabilities are\nprogressing rapidly on high-school math competitions and coding, can they\nreason effectively through complex, open-ended challenges found in frontier\nphysics research? And crucially, what kinds of reasoning tasks do physicists\nwant LLMs to assist with? To address these questions, we present the CritPt\n(Complex Research using Integrated Thinking - Physics Test, pronounced\n\"critical point\"), the first benchmark designed to test LLMs on unpublished,\nresearch-level reasoning tasks that broadly covers modern physics research\nareas, including condensed matter, quantum physics, atomic, molecular & optical\nphysics, astrophysics, high energy physics, mathematical physics, statistical\nphysics, nuclear physics, nonlinear dynamics, fluid dynamics and biophysics.\nCritPt consists of 71 composite research challenges designed to simulate\nfull-scale research projects at the entry level, which are also decomposed to\n190 simpler checkpoint tasks for more fine-grained insights. All problems are\nnewly created by 50+ active physics researchers based on their own research.\nEvery problem is hand-curated to admit a guess-resistant and machine-verifiable\nanswer and is evaluated by an automated grading pipeline heavily customized for\nadvanced physics-specific output formats. We find that while current\nstate-of-the-art LLMs show early promise on isolated checkpoints, they remain\nfar from being able to reliably solve full research-scale challenges: the best\naverage accuracy among base models is only 4.0% , achieved by GPT-5 (high),\nmoderately rising to around 10% when equipped with coding tools. Through the\nrealistic yet standardized evaluation offered by CritPt, we highlight a large\ndisconnect between current model capabilities and realistic physics research\ndemands, offering a foundation to guide the development of scientifically\ngrounded AI tools.",
      "url": "http://arxiv.org/abs/2509.26574v2",
      "published_time_eastern_timestamp": 1759253643.0
    },
    {
      "title": "Towards Reliable Benchmarking: A Contamination Free, Controllable\n  Evaluation Framework for Multi-step LLM Function Calling",
      "summary": "As language models gain access to external tools via structured function\ncalls, they become increasingly more capable of solving complex, multi-step\ntasks. However, existing benchmarks for tool-augmented language models (TaLMs)\nprovide insufficient control over factors such as the number of functions\naccessible, task complexity, and input size, and remain vulnerable to data\ncontamination. We present FuncBenchGen, a unified, contamination-free framework\nthat evaluates TaLMs by generating synthetic multi-step tool-use tasks. The key\nidea is to cast tool use as traversal over a hidden function-dependency DAG\nwhere nodes are function calls and an edge between nodes represents one\nfunction consuming the output of another. Given a set of external function\nschemas, initial variable values, and a target variable, models must compose\nthe correct call sequence to compute the target variable. FuncBenchGen allows\nusers to precisely control task difficulty (e.g., graph size, dependency depth,\nand distractor functions) while avoiding data leakage. We apply our\nFuncBenchGen framework to evaluate seven LLMs on tool use tasks of varying\ndifficulty. Reasoning-optimized models consistently outperform general-purpose\nmodels with GPT-5 significantly outperforming other models. Performance\ndeclines sharply as dependency depth increases. Furthermore, connected\nirrelevant functions prove especially difficult to handle. We find that strong\nmodels often make syntactically valid function calls but propagate incorrect or\nstale argument values across steps, revealing brittle state tracking by LLMs in\nmulti-turn tool use. Motivated by this observation, we introduce a simple\nmitigation strategy that explicitly restates prior variable values to the agent\nat each step. Surprisingly, this lightweight change yields substantial gains\nacross models. e.g., yielding a success rate improvement from 62.5% to 81.3%\nfor GPT-5.",
      "url": "http://arxiv.org/abs/2509.26553v1",
      "published_time_eastern_timestamp": 1759252877.0
    },
    {
      "title": "Can LLMs Write Mathematics Papers? A Case Study in Reservoir Computing",
      "summary": "As AI capabilities continue to grow exponentially on economically relevant\nhuman expert tasks, with task completion horizons doubling every 7 months\naccording to the Model Evaluation and Threat Research (METR), we are interested\nin how this applies to the task of mathematics research. To explore this, we\nevaluated the capability of four frontier large language models (LLMs), ChatGPT\n5, Claude 4.1 Opus, Gemini 2.5 Pro, and Grok 4, at the task of creating a\nmini-paper on reservoir computing. All models produced engaging papers with\nsome apparent understanding of various techniques, but were sometimes lead to\nmistakes by surface level understanding of key ideas. That said, the\ncapabilities on LLMs on this task was likely as good or greater than that\npredicted by METR.",
      "url": "http://arxiv.org/abs/2509.26550v1",
      "published_time_eastern_timestamp": 1759252763.0
    },
    {
      "title": "Towards Verified Code Reasoning by LLMs",
      "summary": "While LLM-based agents are able to tackle a wide variety of code reasoning\nquestions, the answers are not always correct. This prevents the agent from\nbeing useful in situations where high precision is desired: (1) helping a\nsoftware engineer understand a new code base, (2) helping a software engineer\nduring code review sessions, and (3) ensuring that the code generated by an\nautomated code generation system meets certain requirements (e.g. fixes a bug,\nimproves readability, implements a feature).\n  As a result of this lack of trustworthiness, the agent's answers need to be\nmanually verified before they can be trusted. Manually confirming responses\nfrom a code reasoning agent requires human effort and can result in slower\ndeveloper productivity, which weakens the assistance benefits of the agent. In\nthis paper, we describe a method to automatically validate the answers provided\nby a code reasoning agent by verifying its reasoning steps. At a very high\nlevel, the method consists of extracting a formal representation of the agent's\nresponse and, subsequently, using formal verification and program analysis\ntools to verify the agent's reasoning steps.\n  We applied this approach to a benchmark set of 20 uninitialized variable\nerrors detected by sanitizers and 20 program equivalence queries. For the\nuninitialized variable errors, the formal verification step was able to\nvalidate the agent's reasoning on 13/20 examples, and for the program\nequivalence queries, the formal verification step successfully caught 6/8\nincorrect judgments made by the agent.",
      "url": "http://arxiv.org/abs/2509.26546v1",
      "published_time_eastern_timestamp": 1759252671.0
    },
    {
      "title": "TASP: Topology-aware Sequence Parallelism",
      "summary": "Long-context large language models (LLMs) face constraints due to the\nquadratic complexity of the self-attention mechanism. The mainstream sequence\nparallelism (SP) method, Ring Attention, attempts to solve this by distributing\nthe query into multiple query chunks across accelerators and enable each Q\ntensor to access all KV tensors from other accelerators via the Ring AllGather\ncommunication primitive. However, it exhibits low communication efficiency,\nrestricting its practical applicability. This inefficiency stems from the\nmismatch between the Ring AllGather communication primitive it adopts and the\nAlltoAll topology of modern accelerators. A Ring AllGather primitive is\ncomposed of iterations of ring-styled data transfer, which can only utilize a\nvery limited fraction of an AlltoAll topology.\n  Inspired by the Hamiltonian decomposition of complete directed graphs, we\nidentify that modern accelerator topology can be decomposed into multiple\northogonal ring datapaths which can concurrently transfer data without\ninterference. Based on this, we further observe that the Ring AllGather\nprimitive can also be decomposed into the same number of concurrent ring-styled\ndata transfer at every iteration. Based on these insights, we propose TASP, a\ntopology-aware SP method for long-context LLMs that fully utilizes the\ncommunication capacity of modern accelerators via topology decomposition and\nprimitive decomposition. Experimental results on both single-node and\nmulti-node NVIDIA H100 systems and a single-node AMD MI300X system demonstrate\nthat TASP achieves higher communication efficiency than Ring Attention on these\nmodern accelerator topologies and achieves up to 3.58 speedup than Ring\nAttention and its variant Zigzag-Ring Attention. The code is available at\nhttps://github.com/infinigence/HamiltonAttention.",
      "url": "http://arxiv.org/abs/2509.26541v1",
      "published_time_eastern_timestamp": 1759252527.0
    },
    {
      "title": "Rearchitecting Datacenter Lifecycle for AI: A TCO-Driven Framework",
      "summary": "The rapid rise of large language models (LLMs) has been driving an enormous\ndemand for AI inference infrastructure, mainly powered by high-end GPUs. While\nthese accelerators offer immense computational power, they incur high capital\nand operational costs due to frequent upgrades, dense power consumption, and\ncooling demands, making total cost of ownership (TCO) for AI datacenters a\ncritical concern for cloud providers. Unfortunately, traditional datacenter\nlifecycle management (designed for general-purpose workloads) struggles to keep\npace with AI's fast-evolving models, rising resource needs, and diverse\nhardware profiles. In this paper, we rethink the AI datacenter lifecycle scheme\nacross three stages: building, hardware refresh, and operation. We show how\ndesign choices in power, cooling, and networking provisioning impact long-term\nTCO. We also explore refresh strategies aligned with hardware trends. Finally,\nwe use operation software optimizations to reduce cost. While these\noptimizations at each stage yield benefits, unlocking the full potential\nrequires rethinking the entire lifecycle. Thus, we present a holistic lifecycle\nmanagement framework that coordinates and co-optimizes decisions across all\nthree stages, accounting for workload dynamics, hardware evolution, and system\naging. Our system reduces the TCO by up to 40\\% over traditional approaches.\nUsing our framework we provide guidelines on how to manage AI datacenter\nlifecycle for the future.",
      "url": "http://arxiv.org/abs/2509.26534v1",
      "published_time_eastern_timestamp": 1759252131.0
    },
    {
      "title": "BatonVoice: An Operationalist Framework for Enhancing Controllable\n  Speech Synthesis with Linguistic Intelligence from LLMs",
      "summary": "The rise of Large Language Models (LLMs) is reshaping multimodel models, with\nspeech synthesis being a prominent application. However, existing approaches\noften underutilize the linguistic intelligence of these models, typically\nfailing to leverage their powerful instruction-following capabilities. This\nlimitation hinders the model's ability to follow text instructions for\ncontrollable Text-to-Speech~(TTS). To address this, we propose a new paradigm\ninspired by ``operationalism'' that decouples instruction understanding from\nspeech generation. We introduce BatonVoice, a framework where an LLM acts as a\n``conductor'', understanding user instructions and generating a textual\n``plan'' -- explicit vocal features (e.g., pitch, energy). A separate TTS\nmodel, the ``orchestra'', then generates the speech from these features. To\nrealize this component, we develop BatonTTS, a TTS model trained specifically\nfor this task. Our experiments demonstrate that BatonVoice achieves strong\nperformance in controllable and emotional speech synthesis, outperforming\nstrong open- and closed-source baselines. Notably, our approach enables\nremarkable zero-shot cross-lingual generalization, accurately applying feature\ncontrol abilities to languages unseen during post-training. This demonstrates\nthat objectifying speech into textual vocal features can more effectively\nunlock the linguistic intelligence of LLMs.",
      "url": "http://arxiv.org/abs/2509.26514v1",
      "published_time_eastern_timestamp": 1759251134.0
    },
    {
      "title": "Revealing the Power of Post-Training for Small Language Models via\n  Knowledge Distillation",
      "summary": "The rapid advancement of large language models (LLMs) has significantly\nadvanced the capabilities of artificial intelligence across various domains.\nHowever, their massive scale and high computational costs render them\nunsuitable for direct deployment in resource-constrained edge environments.\nThis creates a critical need for high-performance small models that can operate\nefficiently at the edge. Yet, after pre-training alone, these smaller models\noften fail to meet the performance requirements of complex tasks. To bridge\nthis gap, we introduce a systematic post-training pipeline that efficiently\nenhances small model accuracy. Our post training pipeline consists of\ncurriculum-based supervised fine-tuning (SFT) and offline on-policy knowledge\ndistillation. The resulting instruction-tuned model achieves state-of-the-art\nperformance among billion-parameter models, demonstrating strong generalization\nunder strict hardware constraints while maintaining competitive accuracy across\na variety of tasks. This work provides a practical and efficient solution for\ndeveloping high-performance language models on Ascend edge devices.",
      "url": "http://arxiv.org/abs/2509.26497v1",
      "published_time_eastern_timestamp": 1759250455.0
    },
    {
      "title": "OffTopicEval: When Large Language Models Enter the Wrong Chat, Almost\n  Always!",
      "summary": "Large Language Model (LLM) safety is one of the most pressing challenges for\nenabling wide-scale deployment. While most studies and global discussions focus\non generic harms, such as models assisting users in harming themselves or\nothers, enterprises face a more fundamental concern: whether LLM-based agents\nare safe for their intended use case. To address this, we introduce operational\nsafety, defined as an LLM's ability to appropriately accept or refuse user\nqueries when tasked with a specific purpose. We further propose OffTopicEval,\nan evaluation suite and benchmark for measuring operational safety both in\ngeneral and within specific agentic use cases. Our evaluations on six model\nfamilies comprising 20 open-weight LLMs reveal that while performance varies\nacross models, all of them remain highly operationally unsafe. Even the\nstrongest models -- Qwen-3 (235B) with 77.77\\% and Mistral (24B) with 79.96\\%\n-- fall far short of reliable operational safety, while GPT models plateau in\nthe 62--73\\% range, Phi achieves only mid-level scores (48--70\\%), and Gemma\nand Llama-3 collapse to 39.53\\% and 23.84\\%, respectively. While operational\nsafety is a core model alignment issue, to suppress these failures, we propose\nprompt-based steering methods: query grounding (Q-ground) and system-prompt\ngrounding (P-ground), which substantially improve OOD refusal. Q-ground\nprovides consistent gains of up to 23\\%, while P-ground delivers even larger\nboosts, raising Llama-3.3 (70B) by 41\\% and Qwen-3 (30B) by 27\\%. These results\nhighlight both the urgent need for operational safety interventions and the\npromise of prompt-based steering as a first step toward more reliable LLM-based\nagents.",
      "url": "http://arxiv.org/abs/2509.26495v1",
      "published_time_eastern_timestamp": 1759250357.0
    }
  ]
}